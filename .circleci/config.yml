---
version: 2.1

executors:
  python:
    docker:
      - image: cimg/python:3.10
  publisher:
    docker:
      - image: quay.io/cloudalchemy/publisher:latest

jobs:
  lint:
    executor: python
    steps:
      - checkout
      - run: pip install ansible ansible-lint yamllint flake8
      - run: ansible-lint
      - run: yamllint .
      - run: flake8

  test:
    executor: python
    parameters:
      ansible:
        type: string
      scenario:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run: pip install "ansible~=<< parameters.ansible >>.0"
      - run: pip install -r test-requirements.txt
      - run:
          no_output_timeout: 60m
          command: |
            if [[ -n "${CIRCLE_PULL_REQUEST}" ]] && [[ '<< parameters.scenario >>' == 'latest' ]]; then
              echo 'Not running latest on PR'
            else
              # molecule test -s '<< parameters.scenario >>' --destroy always
              - run: molecule -s '<< parameters.scenario >>' --debug dependency
              - run: molecule -s '<< parameters.scenario >>' --debug lint
              - run: molecule -s '<< parameters.scenario >>' --debug cleanup
              - run: molecule -s '<< parameters.scenario >>' --debug destroy
              - run: molecule -s '<< parameters.scenario >>' --debug syntax
              - run: molecule -s '<< parameters.scenario >>' --debug create
              - run: molecule -s '<< parameters.scenario >>' --debug prepare
              - run: molecule -s '<< parameters.scenario >>' --debug converge
              - run: molecule -s '<< parameters.scenario >>' --debug idempotence
              - run: molecule -s '<< parameters.scenario >>' --debug verify
              - run: molecule -s '<< parameters.scenario >>' --debug cleanup
              - run: molecule -s '<< parameters.scenario >>' --debug destroy

            fi
  release:
    executor: publisher
    steps:
      - checkout
      - run: |
          PROJECT_USERNAME="${CIRCLE_PROJECT_USERNAME}" \
          PROJECT_REPONAME="${CIRCLE_PROJECT_REPONAME}" \
          create_release

  galaxy:
    executor: python
    steps:
      - checkout
      - run: pip install ansible
      - run: ansible-galaxy role import --token "${GALAXY_TOKEN}" "${CIRCLE_PROJECT_USERNAME}" "${CIRCLE_PROJECT_REPONAME}"

workflows:
  version: 2
  molecule:
    jobs:
      - lint:
          filters:
            tags:
              only: /.*/
      - test:
          matrix:
            parameters:
              ansible:
                # - "2.9"
                # - "2.10"
                - "4.10"
                # - "5.1"
              scenario:
                # - default
                - alternative
                # - latest
          filters:
            tags:
              only: /.*/
      - release:
          context: release
          requires:
            - lint
            - test
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - galaxy:
          context: galaxy
          requires:
            - lint
            - test
            - release
          filters:
            branches:
              only: master
