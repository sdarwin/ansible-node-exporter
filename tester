---
name: macos ci
'on':
  pull_request:
  push:
    branches:
      - master
      - develop
      - feature/*

jobs:
  macos:
    name: macos
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include: 
          - os: macos-10.15
            ansible_python_interpreter: /usr/local/bin/python3
        scenario:
          - latest
          - default
          - alternative
        ansible_version:
          - "2.9"
          - "2.10"
          - "4.10"
          - "5.1"

    steps:
      - name: Check out the codebase
        uses: actions/checkout@v2

      - name: Check pip packages
        run: sudo pip3 list

      - name: Install test dependencies
        run: sudo pip3 install "ansible~=${{ matrix.ansible_version }}.0"

      - name: Set up the test environment
        run: |
          cp tests/test-inventory ./test-inventory
          cp tests/ansible.cfg ./ansible.cfg
          sudo pip3 install -r test-requirements.txt
          mkdir -p /Users/runner/.ansible/roles
          ln -s $GITHUB_WORKSPACE /Users/runner/.ansible/roles/cloudalchemy.node_exporter

      - name: Run playbook tests
        run: |
          if [[ -n "${{ github.event.pull_request.number }}" ]] && [[ "${{ matrix.scenario }}" == 'latest' ]]; then
            echo "Not testing 'latest' and 'pull request'
          else
            echo "Test the playbook's syntax"
            ansible-playbook -e "ansible_python_interpreter=${{ matrix.ansible_python_interpreter }}" molecule/${{ matrix.scenario }}/playbook.yml --syntax-check

            echo "Run the prepare playbook"
            ansible-playbook -vvv -e "ansible_python_interpreter=${{ matrix.ansible_python_interpreter }}" molecule/${{ matrix.scenario }}/prepare.yml

            echo "Run the main playbook"
            ansible-playbook -vvv -e "ansible_python_interpreter=${{ matrix.ansible_python_interpreter }}" molecule/${{ matrix.scenario }}/playbook.yml

            echo "Test the results"
            ansible-playbook -e "ansible_python_interpreter=${{ matrix.ansible_python_interpreter }}" tests/tests_macos_${{ matrix.scenario }}.yml

            echo "Idempotence check"
            idempotence=$(mktemp)
            ansible-playbook -e "ansible_python_interpreter=${{ matrix.ansible_python_interpreter }}" molecule/${{ matrix.scenario }}/playbook.yml | tee -a ${idempotence}
            tail ${idempotence} | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)
          fi
        env:
          ANSIBLE_FORCE_COLOR: '1'
          OBJC_DISABLE_INITIALIZE_FORK_SAFETY: 'YES"
